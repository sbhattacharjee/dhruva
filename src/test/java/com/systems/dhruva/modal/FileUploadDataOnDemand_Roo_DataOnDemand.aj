// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.systems.dhruva.modal;

import com.systems.dhruva.modal.FileUpload;
import com.systems.dhruva.modal.FileUploadDataOnDemand;
import java.io.File;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect FileUploadDataOnDemand_Roo_DataOnDemand {
    
    declare @type: FileUploadDataOnDemand: @Component;
    
    private Random FileUploadDataOnDemand.rnd = new SecureRandom();
    
    private List<FileUpload> FileUploadDataOnDemand.data;
    
    public FileUpload FileUploadDataOnDemand.getNewTransientFileUpload(int index) {
        FileUpload obj = new FileUpload();
        setContent(obj, index);
        setContentType(obj, index);
        setFileName(obj, index);
        setFileSize(obj, index);
        setFileUpload(obj, index);
        return obj;
    }
    
    public void FileUploadDataOnDemand.setContent(FileUpload obj, int index) {
        byte[] content = String.valueOf(index).getBytes();
        obj.setContent(content);
    }
    
    public void FileUploadDataOnDemand.setContentType(FileUpload obj, int index) {
        String contentType = "contentType_" + index;
        obj.setContentType(contentType);
    }
    
    public void FileUploadDataOnDemand.setFileName(FileUpload obj, int index) {
        String fileName = "fileName_" + index;
        obj.setFileName(fileName);
    }
    
    public void FileUploadDataOnDemand.setFileSize(FileUpload obj, int index) {
        Long fileSize = new Integer(index).longValue();
        obj.setFileSize(fileSize);
    }
    
    public void FileUploadDataOnDemand.setFileUpload(FileUpload obj, int index) {
        File fileUpload = null;
        obj.setFileUpload(fileUpload);
    }
    
    public FileUpload FileUploadDataOnDemand.getSpecificFileUpload(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        FileUpload obj = data.get(index);
        Long id = obj.getId();
        return FileUpload.findFileUpload(id);
    }
    
    public FileUpload FileUploadDataOnDemand.getRandomFileUpload() {
        init();
        FileUpload obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return FileUpload.findFileUpload(id);
    }
    
    public boolean FileUploadDataOnDemand.modifyFileUpload(FileUpload obj) {
        return false;
    }
    
    public void FileUploadDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = FileUpload.findFileUploadEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'FileUpload' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<FileUpload>();
        for (int i = 0; i < 10; i++) {
            FileUpload obj = getNewTransientFileUpload(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
